{
  "service": {
    "service": "administrador-technoagentes",
    "serviceObject": {
      "name": "administrador-technoagentes"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-west-2",
      "deploymentBucket": "mi-bucket-personalizado-dev",
      "environment": {
        "ENVIRONMENT": "dev",
        "TENANTS_TABLE": {
          "Ref": "TenantsTable"
        },
        "USERS_TABLE": {
          "Ref": "UsersTable"
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TenantsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "UsersTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "TenantsTable",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "UsersTable",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "mi-bucket-personalizado-dev",
        "serverSideEncryption": "AES256"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetTenantUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-getTenantUsers"
            }
          },
          "CreateTenantUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-createTenantUser"
            }
          },
          "UpdateTenantUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-updateTenantUser"
            }
          },
          "DeleteTenantUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-deleteTenantUser"
            }
          },
          "StartTenantOnboardingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-startTenantOnboarding"
            }
          },
          "PublicTenantOnboardingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-publicTenantOnboarding"
            }
          },
          "CheckTCAcceptanceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-checkTCAcceptance"
            }
          },
          "RecordTCAcceptanceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-recordTCAcceptance"
            }
          },
          "PaymentWebhookLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-paymentWebhook"
            }
          },
          "GetPublicPlansLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/administrador-technoagentes-dev-getPublicPlans"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "administrador-technoagentes",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/administrador-technoagentes-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/administrador-technoagentes-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "administrador-technoagentes",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetTenantUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/getTenantUsers.zip"
              },
              "Handler": "src/api/tenant-users-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-getTenantUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTenantUsersLogGroup"
            ]
          },
          "CreateTenantUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/createTenantUser.zip"
              },
              "Handler": "src/api/tenant-users-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-createTenantUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateTenantUserLogGroup"
            ]
          },
          "UpdateTenantUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/updateTenantUser.zip"
              },
              "Handler": "src/api/tenant-users-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-updateTenantUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTenantUserLogGroup"
            ]
          },
          "DeleteTenantUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/deleteTenantUser.zip"
              },
              "Handler": "src/api/tenant-users-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-deleteTenantUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteTenantUserLogGroup"
            ]
          },
          "StartTenantOnboardingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/startTenantOnboarding.zip"
              },
              "Handler": "src/onboarding/onboarding-api-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-startTenantOnboarding",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StartTenantOnboardingLogGroup"
            ]
          },
          "PublicTenantOnboardingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/publicTenantOnboarding.zip"
              },
              "Handler": "src/onboarding/onboarding-api-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-publicTenantOnboarding",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PublicTenantOnboardingLogGroup"
            ]
          },
          "CheckTCAcceptanceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/checkTCAcceptance.zip"
              },
              "Handler": "src/api/tc-acceptance-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-checkTCAcceptance",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckTCAcceptanceLogGroup"
            ]
          },
          "RecordTCAcceptanceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/recordTCAcceptance.zip"
              },
              "Handler": "src/api/tc-acceptance-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-recordTCAcceptance",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RecordTCAcceptanceLogGroup"
            ]
          },
          "PaymentWebhookLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/paymentWebhook.zip"
              },
              "Handler": "src/api/webhook-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-paymentWebhook",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PaymentWebhookLogGroup"
            ]
          },
          "GetPublicPlansLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "mi-bucket-personalizado-dev",
                "S3Key": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z/getPublicPlans.zip"
              },
              "Handler": "src/api/public-plans-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "administrador-technoagentes-dev-getPublicPlans",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENVIRONMENT": "dev",
                  "TENANTS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TENANTS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPublicPlansLogGroup"
            ]
          },
          "GetTenantUsersLambdaVersionWT3CjAlu4qDASyRS2K3C3cDObAtXrs1Kl0DMSVK13c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTenantUsersLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "RecordTCAcceptanceLambdaVersionyzIBfEP3KwaOqwZpKqRcNO5X1wm5joudqAaPchoLNH0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RecordTCAcceptanceLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "DeleteTenantUserLambdaVersion65PQ6D3wjgmOqihbSItwvv4BplFBjOnDOuT1Gnyu4I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTenantUserLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "CheckTCAcceptanceLambdaVersion5w5EoJGRukh2om6VDJZduVSm8z20YUVmnXHUoOmefw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckTCAcceptanceLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "CreateTenantUserLambdaVersionj8GhwYlpybbD0ZkWiwyh7IZMiWccbgqbee0jv0gdjAQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateTenantUserLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "StartTenantOnboardingLambdaVersionXcDEbNQ6DXDnwmy4Cil9bNU8F7BVWdaKE9GT3IcKyw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StartTenantOnboardingLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "PublicTenantOnboardingLambdaVersion3iVJ7cSRsvJlNHkxbSgckPypnKi306CFrbwskL1ZQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PublicTenantOnboardingLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "UpdateTenantUserLambdaVersionfS1IixmZ2nBzY5hP27TjfeUto4W2AwCWlODQS8rYR58": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTenantUserLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "PaymentWebhookLambdaVersioncLzd5Phiugxllzv7ejWKrstdwAIUUhQdIHwedOXQk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PaymentWebhookLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "GetPublicPlansLambdaVersionS6hNxQrH1cgylGXhnXXmeWm7d5iVHofOD1F3x87m5Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPublicPlansLambdaFunction"
              },
              "CodeSha256": "QErU7Yl7nQOJAIDr4P8ZtLx6Ul7C02GI1VIOsDcVdqQ="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-administrador-technoagentes",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceTenants": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tenants",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTenantsUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTenants"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTenantsUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTenantsUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOnboarding": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "onboarding",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePublic": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "public",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePublicOnboarding": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePublic"
              },
              "PathPart": "onboarding",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePublicPlans": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePublic"
              },
              "PathPart": "plans",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTcDashacceptance": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tc-acceptance",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWebhooks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "webhooks",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWebhooksPayment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWebhooks"
              },
              "PathPart": "payment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTenantsUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://main.dfvclvboq7vvrcn.amplifyapp.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTenantsUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTenantsUsersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://main.dfvclvboq7vvrcn.amplifyapp.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTenantsUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOnboardingOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://main.dfvclvboq7vvrcn.amplifyapp.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOnboarding"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPublicOnboardingOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://main.dfvclvboq7vvrcn.amplifyapp.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicOnboarding"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTcDashacceptanceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://main.dfvclvboq7vvrcn.amplifyapp.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTcDashacceptance"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWebhooksPaymentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://main.dfvclvboq7vvrcn.amplifyapp.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhooksPayment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPublicPlansOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'https://main.dfvclvboq7vvrcn.amplifyapp.com'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicPlans"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTenantsUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTenantsUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "CognitoAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTenantUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTenantUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTenantsUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTenantsUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "CognitoAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateTenantUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateTenantUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTenantsUsersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTenantsUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "CognitoAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateTenantUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateTenantUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTenantsUsersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTenantsUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "CognitoAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteTenantUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteTenantUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOnboardingPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOnboarding"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "CognitoAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "StartTenantOnboardingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "StartTenantOnboardingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPublicOnboardingPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicOnboarding"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PublicTenantOnboardingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PublicTenantOnboardingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTcDashacceptanceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTcDashacceptance"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "CognitoAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckTCAcceptanceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CheckTCAcceptanceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTcDashacceptancePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTcDashacceptance"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "CognitoAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RecordTCAcceptanceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RecordTCAcceptanceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWebhooksPaymentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhooksPayment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PaymentWebhookLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PaymentWebhookLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPublicPlansGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicPlans"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPublicPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPublicPlansLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1752712871940": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodTenantsUsersOptions",
              "ApiGatewayMethodTenantsUsersIdVarOptions",
              "ApiGatewayMethodOnboardingOptions",
              "ApiGatewayMethodPublicOnboardingOptions",
              "ApiGatewayMethodTcDashacceptanceOptions",
              "ApiGatewayMethodWebhooksPaymentOptions",
              "ApiGatewayMethodPublicPlansOptions",
              "ApiGatewayMethodTenantsUsersGet",
              "ApiGatewayMethodTenantsUsersPost",
              "ApiGatewayMethodTenantsUsersIdVarPut",
              "ApiGatewayMethodTenantsUsersIdVarDelete",
              "ApiGatewayMethodOnboardingPost",
              "ApiGatewayMethodPublicOnboardingPost",
              "ApiGatewayMethodTcDashacceptanceGet",
              "ApiGatewayMethodTcDashacceptancePost",
              "ApiGatewayMethodWebhooksPaymentPost",
              "ApiGatewayMethodPublicPlansGet"
            ]
          },
          "GetTenantUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTenantUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateTenantUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateTenantUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateTenantUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTenantUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteTenantUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTenantUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "StartTenantOnboardingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "StartTenantOnboardingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PublicTenantOnboardingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PublicTenantOnboardingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckTCAcceptanceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckTCAcceptanceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RecordTCAcceptanceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RecordTCAcceptanceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PaymentWebhookLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PaymentWebhookLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPublicPlansLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPublicPlansLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "administrador-technoagentes-user-pool-dev",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "Schema": [
                {
                  "Name": "custom:tenantId",
                  "AttributeDataType": "String",
                  "Mutable": false,
                  "Required": false
                }
              ],
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": true
              },
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8,
                  "RequireLowercase": true,
                  "RequireNumbers": true,
                  "RequireSymbols": true,
                  "RequireUppercase": true
                }
              }
            }
          },
          "CognitoAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "Name": "CognitoAuthorizer",
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::GetAtt": [
                    "CognitoUserPool",
                    "Arn"
                  ]
                }
              ],
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "IdentitySource": "method.request.header.Authorization"
            }
          },
          "TenantsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "administrador-technoagentes-tenants-dev-v2",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenantId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "StatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "administrador-technoagentes-users-dev-v2",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "GSI1",
                  "KeySchema": [
                    {
                      "AttributeName": "GSI1PK",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "GSI1SK",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "mi-bucket-personalizado-dev",
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetTenantUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTenantUsersLambdaVersionWT3CjAlu4qDASyRS2K3C3cDObAtXrs1Kl0DMSVK13c"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-GetTenantUsersLambdaFunctionQualifiedArn"
            }
          },
          "RecordTCAcceptanceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RecordTCAcceptanceLambdaVersionyzIBfEP3KwaOqwZpKqRcNO5X1wm5joudqAaPchoLNH0"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-RecordTCAcceptanceLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTenantUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTenantUserLambdaVersion65PQ6D3wjgmOqihbSItwvv4BplFBjOnDOuT1Gnyu4I"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-DeleteTenantUserLambdaFunctionQualifiedArn"
            }
          },
          "CheckTCAcceptanceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckTCAcceptanceLambdaVersion5w5EoJGRukh2om6VDJZduVSm8z20YUVmnXHUoOmefw"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-CheckTCAcceptanceLambdaFunctionQualifiedArn"
            }
          },
          "CreateTenantUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateTenantUserLambdaVersionj8GhwYlpybbD0ZkWiwyh7IZMiWccbgqbee0jv0gdjAQ"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-CreateTenantUserLambdaFunctionQualifiedArn"
            }
          },
          "StartTenantOnboardingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StartTenantOnboardingLambdaVersionXcDEbNQ6DXDnwmy4Cil9bNU8F7BVWdaKE9GT3IcKyw"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-StartTenantOnboardingLambdaFunctionQualifiedArn"
            }
          },
          "PublicTenantOnboardingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PublicTenantOnboardingLambdaVersion3iVJ7cSRsvJlNHkxbSgckPypnKi306CFrbwskL1ZQ"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-PublicTenantOnboardingLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTenantUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTenantUserLambdaVersionfS1IixmZ2nBzY5hP27TjfeUto4W2AwCWlODQS8rYR58"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-UpdateTenantUserLambdaFunctionQualifiedArn"
            }
          },
          "PaymentWebhookLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PaymentWebhookLambdaVersioncLzd5Phiugxllzv7ejWKrstdwAIUUhQdIHwedOXQk"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-PaymentWebhookLambdaFunctionQualifiedArn"
            }
          },
          "GetPublicPlansLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPublicPlansLambdaVersionS6hNxQrH1cgylGXhnXXmeWm7d5iVHofOD1F3x87m5Q"
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-GetPublicPlansLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-administrador-technoagentes-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "treliPrices": {
        "basic": "price_basic_example",
        "standard": "price_standard_example",
        "premium": "price_premium_example"
      }
    },
    "plugins": [
      "serverless-iam-roles-per-function"
    ],
    "pluginsData": {},
    "functions": {
      "getTenantUsers": {
        "handler": "src/api/tenant-users-handler.handler",
        "iamRoleStatementsName": "get-users-role",
        "events": [
          {
            "http": {
              "path": "tenants/users",
              "method": "get",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "CognitoAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-getTenantUsers",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\getTenantUsers.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTenantUsersLambdaVersionWT3CjAlu4qDASyRS2K3C3cDObAtXrs1Kl0DMSVK13c"
      },
      "createTenantUser": {
        "handler": "src/api/tenant-users-handler.handler",
        "iamRoleStatementsName": "create-user-role",
        "events": [
          {
            "http": {
              "path": "tenants/users",
              "method": "post",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "CognitoAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-createTenantUser",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\createTenantUser.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateTenantUserLambdaVersionj8GhwYlpybbD0ZkWiwyh7IZMiWccbgqbee0jv0gdjAQ"
      },
      "updateTenantUser": {
        "handler": "src/api/tenant-users-handler.handler",
        "iamRoleStatementsName": "update-user-role",
        "events": [
          {
            "http": {
              "path": "tenants/users/{id}",
              "method": "put",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "CognitoAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-updateTenantUser",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\updateTenantUser.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateTenantUserLambdaVersionfS1IixmZ2nBzY5hP27TjfeUto4W2AwCWlODQS8rYR58"
      },
      "deleteTenantUser": {
        "handler": "src/api/tenant-users-handler.handler",
        "iamRoleStatementsName": "delete-user-role",
        "events": [
          {
            "http": {
              "path": "tenants/users/{id}",
              "method": "delete",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "CognitoAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-deleteTenantUser",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\deleteTenantUser.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteTenantUserLambdaVersion65PQ6D3wjgmOqihbSItwvv4BplFBjOnDOuT1Gnyu4I"
      },
      "startTenantOnboarding": {
        "handler": "src/onboarding/onboarding-api-handler.handler",
        "iamRoleStatementsName": "onboarding-role",
        "events": [
          {
            "http": {
              "path": "onboarding",
              "method": "post",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "CognitoAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-startTenantOnboarding",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\startTenantOnboarding.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "StartTenantOnboardingLambdaVersionXcDEbNQ6DXDnwmy4Cil9bNU8F7BVWdaKE9GT3IcKyw"
      },
      "publicTenantOnboarding": {
        "handler": "src/onboarding/onboarding-api-handler.handler",
        "iamRoleStatementsName": "public-onboarding-role",
        "events": [
          {
            "http": {
              "path": "public/onboarding",
              "method": "post",
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-publicTenantOnboarding",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\publicTenantOnboarding.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PublicTenantOnboardingLambdaVersion3iVJ7cSRsvJlNHkxbSgckPypnKi306CFrbwskL1ZQ"
      },
      "checkTCAcceptance": {
        "handler": "src/api/tc-acceptance-handler.handler",
        "iamRoleStatementsName": "check-tc-role",
        "events": [
          {
            "http": {
              "path": "tc-acceptance",
              "method": "get",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "CognitoAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-checkTCAcceptance",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\checkTCAcceptance.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CheckTCAcceptanceLambdaVersion5w5EoJGRukh2om6VDJZduVSm8z20YUVmnXHUoOmefw"
      },
      "recordTCAcceptance": {
        "handler": "src/api/tc-acceptance-handler.handler",
        "iamRoleStatementsName": "record-tc-role",
        "events": [
          {
            "http": {
              "path": "tc-acceptance",
              "method": "post",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "CognitoAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-recordTCAcceptance",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\recordTCAcceptance.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RecordTCAcceptanceLambdaVersionyzIBfEP3KwaOqwZpKqRcNO5X1wm5joudqAaPchoLNH0"
      },
      "paymentWebhook": {
        "handler": "src/api/webhook-handler.handler",
        "iamRoleStatementsName": "webhook-role",
        "events": [
          {
            "http": {
              "path": "webhooks/payment",
              "method": "post",
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-paymentWebhook",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\paymentWebhook.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PaymentWebhookLambdaVersioncLzd5Phiugxllzv7ejWKrstdwAIUUhQdIHwedOXQk"
      },
      "getPublicPlans": {
        "handler": "src/api/public-plans-handler.handler",
        "events": [
          {
            "http": {
              "path": "public/plans",
              "method": "get",
              "cors": {
                "origin": "https://main.dfvclvboq7vvrcn.amplifyapp.com",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "administrador-technoagentes-dev-getPublicPlans",
        "package": {
          "artifact": "C:\\Disco local\\MisProyectos\\Administrador Technoagentes\\.serverless\\getPublicPlans.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetPublicPlansLambdaVersionS6hNxQrH1cgylGXhnXXmeWm7d5iVHofOD1F3x87m5Q"
      }
    },
    "resources": {
      "Resources": {
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "administrador-technoagentes-user-pool-dev",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "Schema": [
              {
                "Name": "custom:tenantId",
                "AttributeDataType": "String",
                "Mutable": false,
                "Required": false
              }
            ],
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": true
            },
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireLowercase": true,
                "RequireNumbers": true,
                "RequireSymbols": true,
                "RequireUppercase": true
              }
            }
          }
        },
        "CognitoAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "Name": "CognitoAuthorizer",
            "Type": "COGNITO_USER_POOLS",
            "ProviderARNs": [
              {
                "Fn::GetAtt": [
                  "CognitoUserPool",
                  "Arn"
                ]
              }
            ],
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "IdentitySource": "method.request.header.Authorization"
          }
        },
        "TenantsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "administrador-technoagentes-tenants-dev-v2",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "tenantId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "tenantId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "StatusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "administrador-technoagentes-users-dev-v2",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "GSI1PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "GSI1SK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "GSI1",
                "KeySchema": [
                  {
                    "AttributeName": "GSI1PK",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "GSI1SK",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "administrador-technoagentes",
      "frameworkVersion": "3",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "individually": true,
        "exclude": [
          "node_modules/**",
          "!node_modules/aws-sdk/**",
          "!node_modules/uuid/**",
          "!node_modules/axios/**",
          "**/*.md",
          "**/*.txt",
          "**/*.map",
          "deploy-temp/**",
          "docs/**",
          "tests/**",
          "infrastructure/**",
          "simple-infra/**",
          "dist/**",
          "undefined/**"
        ],
        "excludeDevDependencies": false,
        "artifactsS3KeyDirname": "serverless/administrador-technoagentes/dev/code-artifacts",
        "deploymentBucket": "mi-bucket-personalizado-dev",
        "artifactDirectoryName": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/administrador-technoagentes/dev/1752712946753-2025-07-17T00:42:26.753Z",
    "artifact": ""
  }
}