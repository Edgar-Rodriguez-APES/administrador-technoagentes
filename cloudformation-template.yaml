AWSTemplateFormatVersion: '2010-09-09'
Description: 'Administrador Technoagentes - Ambiente de Prueba'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Ambiente de despliegue

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub administrador-technoagentes-user-pool-${Environment}
      UsernameAttributes:
        - email
      AutoVerifyAttributes:
        - email
      Schema:
        - Name: custom:tenantId
          AttributeDataType: String
          Mutable: false
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub administrador-technoagentes-client-${Environment}
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  # Cognito Identity Pool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub administrador-technoagentes-identity-pool-${Environment}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  # KMS Key
  TenantSharedKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Shared KMS key for tenant data encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'

  TenantSharedKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/administrador-technoagentes-tenant-shared-key-${Environment}
      TargetKeyId: !Ref TenantSharedKey

  # DynamoDB Tables
  TenantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub administrador-technoagentes-tenants-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tenantId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: tenantId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref TenantSharedKey

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub administrador-technoagentes-users-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref TenantSharedKey

  ConfigurationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub administrador-technoagentes-configurations-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref TenantSharedKey

  TCAcceptanceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub administrador-technoagentes-tc-acceptance-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref TenantSharedKey

  WebhookEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub administrador-technoagentes-webhook-events-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 Bucket
  TenantBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub administrador-technoagentes-tenant-data-${Environment}-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyId: !Ref TenantSharedKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # Amplify App
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub administrador-technoagentes-${Environment}
      Description: Administrador Technoagentes Frontend
      BuildSpec: |
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - cd frontend
                - npm ci
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: .next
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
              - .next/cache/**/*
      EnvironmentVariables:
        - Name: NEXT_PUBLIC_API_URL
          Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
        - Name: NEXT_PUBLIC_COGNITO_CLIENT_ID
          Value: !Ref CognitoUserPoolClient
        - Name: NEXT_PUBLIC_COGNITO_USER_POOL_ID
          Value: !Ref CognitoUserPool
        - Name: NEXT_PUBLIC_APP_NAME
          Value: Administrador Technoagentes

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub administrador-technoagentes-${Environment}
      Description: API para Administrador Technoagentes
      EndpointConfiguration:
        Types:
          - REGIONAL

Outputs:
  CognitoUserPoolId:
    Description: ID del User Pool de Cognito
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolId

  CognitoUserPoolClientId:
    Description: ID del Cliente de Cognito
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolClientId

  ApiGatewayUrl:
    Description: URL de la API Gateway
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayUrl

  AmplifyAppId:
    Description: ID de la aplicaci√≥n de Amplify
    Value: !Ref AmplifyApp
    Export:
      Name: !Sub ${AWS::StackName}-AmplifyAppId
