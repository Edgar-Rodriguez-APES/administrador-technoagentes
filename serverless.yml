service: administrador-technoagentes

frameworkVersion: '3'

custom:
  treliPrices:
    basic: price_basic_example
    standard: price_standard_example
    premium: price_premium_example

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    ENVIRONMENT: ${self:provider.stage}
    TENANTS_TABLE: !Ref TenantsTable
    USERS_TABLE: !Ref UsersTable
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      level: INFO
      fullExecutionData: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - !GetAtt TenantsTable.Arn
            - !GetAtt UsersTable.Arn
            - !Join ['', [!GetAtt TenantsTable.Arn, '/index/*']]
            - !Join ['', [!GetAtt UsersTable.Arn, '/index/*']]

plugins:
  - serverless-iam-roles-per-function

package:
  exclude:
  #  - node_modules/aws-sdk/**
    - '**/*.md'
    - '**/*.txt'
    - deploy-temp/**
    - docs/**
    - tests/**
    - infrastructure/**
    - simple-infra/**
    - dist/**
    - undefined/**
    - '**/amplify*.json'
    - '**/api-*.json'
    - '**/deploy-*.ps1'
    - '**/deploy-*.sh'
    - '**/*.zip'
  excludeDevDependencies: true
  
functions:
  # Tenant Users API
  getTenantUsers:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: get-users-role
    events:
      - http:
          path: tenants/users
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors: true

  createTenantUser:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: create-user-role
    events:
    - http:
        path: tenants/users
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: !Ref CognitoAuthorizer
        cors: true

  updateTenantUser:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: update-user-role
    events:
      - http:
          path: tenants/users/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors: true

  deleteTenantUser:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: delete-user-role
    events:
      - http:
          path: tenants/users/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors: true

  startTenantOnboarding:
    handler: src/onboarding/onboarding-api-handler.handler
    iamRoleStatementsName: onboarding-role
    events:
      - http:
          path: onboarding
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors: true

  checkTCAcceptance:
    handler: src/api/tc-acceptance-handler.handler
    iamRoleStatementsName: check-tc-role
    events:
      - http:
          path: tc-acceptance
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors: true

  recordTCAcceptance:
    handler: src/api/tc-acceptance-handler.handler
    iamRoleStatementsName: record-tc-role
    events:
      - http:
          path: tc-acceptance
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors: true

  paymentWebhook:
    handler: src/api/webhook-handler.handler
    iamRoleStatementsName: webhook-role
    events:
      - http:
          path: webhooks/payment
          method: post
          cors: true
resources:
  Resources:
    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: custom:tenantId
            AttributeDataType: String
            Mutable: false
            Required: false
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    # Cognito Authorizer
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn
        RestApiId: !Ref ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization

    # CloudWatch Log Group para API Gateway
    ApiGatewayLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Sub "/aws/apigateway/${self:service}-${self:provider.stage}"
        RetentionInDays: 30

    # Rol para API Gateway Logging
    ApiGatewayLoggingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

    # Account Configuration para API Gateway Logging
    ApiGatewayAccount:
      Type: AWS::ApiGateway::Account
      Properties:
        CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

    # DynamoDB Tables
    TenantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-tenants-${self:provider.stage}-v2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${self:provider.stage}-v2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # Stage Configuration con Logging
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        StageName: ${self:provider.stage}
        AccessLogSetting:
          DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
          Format: >
            {
              "requestId": "$context.requestId",
              "ip": "$context.identity.sourceIp",
              "caller": "$context.identity.caller",
              "user": "$context.identity.user",
              "requestTime": "$context.requestTime",
              "httpMethod": "$context.httpMethod",
              "resourcePath": "$context.resourcePath",
              "status": "$context.status",
              "protocol": "$context.protocol",
              "responseLength": "$context.responseLength",
              "error.message": "$context.error.message",
              "error.messageString": "$context.error.messageString",
              "authorizer.error": "$context.authorizer.error"
            }
        MethodSettings:
          - ResourcePath: "/*"
            HttpMethod: "*"
            LoggingLevel: INFO
            DataTraceEnabled: true
            MetricsEnabled: true

    # API Gateway Deployment
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        Description: "Deployment timestamp: ${timestamp}"
