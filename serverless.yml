service: administrador-technoagentes

frameworkVersion: '3'

custom:
  treliPrices:
    basic: price_basic_example
    standard: price_standard_example
    premium: price_premium_example

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  deploymentBucket:
    name: mi-bucket-personalizado-${self:provider.stage}
    serverSideEncryption: AES256
  environment:
    ENVIRONMENT: ${self:provider.stage}
    TENANTS_TABLE: !Ref TenantsTable
    USERS_TABLE: !Ref UsersTable
  # Esta es la única configuración de logs que necesitamos.
  # El framework se encargará de crear los roles y permisos necesarios.
  # logs:
  #   restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - !GetAtt TenantsTable.Arn
            - !GetAtt UsersTable.Arn
            - !Join ['', [!GetAtt TenantsTable.Arn, '/index/*']]
            - !Join ['', [!GetAtt UsersTable.Arn, '/index/*']]

plugins:
  - serverless-iam-roles-per-function

package:
  individually: true
  exclude:
    - node_modules/**
    - '!node_modules/aws-sdk/**'
    - '!node_modules/uuid/**'
    - '!node_modules/axios/**'
    - '**/*.md'
    - '**/*.txt'
    - '**/*.map'
    - deploy-temp/**
    - docs/**
    - tests/**
    - infrastructure/**
    - simple-infra/**
    - dist/**
    - undefined/**
  excludeDevDependencies: false
  
functions:
  # Tenant Users API
  getTenantUsers:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: get-users-role
    events:
      - http:
          path: tenants/users
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  createTenantUser:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: create-user-role
    events:
      - http:
          path: tenants/users
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  updateTenantUser:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: update-user-role
    events:
      - http:
          path: tenants/users/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  deleteTenantUser:
    handler: src/api/tenant-users-handler.handler
    iamRoleStatementsName: delete-user-role
    events:
      - http:
          path: tenants/users/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  startTenantOnboarding:
    handler: src/onboarding/onboarding-api-handler.handler
    iamRoleStatementsName: onboarding-role
    events:
      - http:
          path: onboarding
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  publicTenantOnboarding:
    handler: src/onboarding/onboarding-api-handler.handler
    iamRoleStatementsName: public-onboarding-role
    events:
      - http:
          path: public/onboarding
          method: post
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  checkTCAcceptance:
    handler: src/api/tc-acceptance-handler.handler
    iamRoleStatementsName: check-tc-role
    events:
      - http:
          path: tc-acceptance
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  recordTCAcceptance:
    handler: src/api/tc-acceptance-handler.handler
    iamRoleStatementsName: record-tc-role
    events:
      - http:
          path: tc-acceptance
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  paymentWebhook:
    handler: src/api/webhook-handler.handler
    iamRoleStatementsName: webhook-role
    events:
      - http:
          path: webhooks/payment
          method: post
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  getPublicPlans:
    handler: src/api/public-plans-handler.handler
    events:
      - http:
          path: public/plans
          method: get
          cors:
            origin: 'https://main.dfvclvboq7vvrcn.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

resources:
  Resources:
    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: custom:tenantId
            AttributeDataType: String
            Mutable: false
            Required: false
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    # Cognito Authorizer
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn
        RestApiId: !Ref ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization

    # DynamoDB Tables
    TenantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-tenants-${self:provider.stage}-v2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${self:provider.stage}-v2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL